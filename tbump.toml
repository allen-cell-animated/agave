# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[version]
current = "1.8.0-rc.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (?P<suffix>\-
    (?P<extra>.+)\.(?P<extraver>\d+)
  )?
  '''

[[field]]
name="suffix"
default=""
[[field]]
name="extra"
default=""
[[field]]
name="extraver"
default=""

[git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[file]]
src = "CMakeLists.txt"
version_template = "{major}.{minor}.{patch}"
[[file]]
src = "agave_pyclient/setup.py"
search = 'version="{current_version}"'
[[file]]
src = "agave_pyclient/agave_pyclient/__init__.py"
[[file]]
src = "agave_pyclient/docs/conf.py"
[[file]]
src = "docs/conf.py"
[[file]]
src = "webclient/package.json"
[[file]]
src = "INSTALL.md"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
